[{"title":"","date":"2017-01-14T08:22:00.434Z","path":"2017/01/14/jquery验证/","text":"jQuery validate 验证validatejQuery ValidatejQuery Validate 插件为表单提供了强大的验证功能，让客户端表单验证变得更简单，同时提供了大量的定制选项，满足应用程序各种需求。该插件捆绑了一套有用的验证方法，包括 URL 和电子邮件验证，同时提供了一个用来编写用户自定义方法的 API。所有的捆绑方法默认使用英语作为错误信息，且已翻译成其他 37 种语言。该插件是由 Jörn Zaefferer 编写和维护的，他是 jQuery 团队的一名成员，是 jQuery UI 团队的主要开发人员，是 QUnit 的维护人员。该插件在 2006 年 jQuery 早期的时候就已经开始出现，并一直更新至今。目前版本是 1.14.0。访问 jQuery Validate 官网，下载最新版的 jQuery Validate 插件。12345678910111213141516171819/*$(function()&#123; $(&quot;#form&quot;).validate(&#123; //定义验证规则 rules: &#123; //对应的是用户名输入框中的name username: &#123; required: true, //必填项目 minlength: 2, //最少几个字符（中文占一个字符） maxlength: 6 &#125;, password: &#123; required: true, //必填项目 minlength: 6, //最少几个字符（中文占一个字符） maxlength: 12, //最少几个字符（中文占一个字符） &#125;, repassword: &#123; equalTo: &quot;#password&quot; &#125; &#125;, 12345678910111213141516171819 //将错误信息转换成中文 messages:&#123; username: &#123; required: &quot;请输入用户名&quot;, //必填项目 minlength: &quot;最少有两个字符&quot;,//最少几个字符（中文占一个字符） maxlength: &quot;最多为6个字符&quot; &#125;, password: &#123; required: &quot;请输入密码&quot;, //必填项目 minlength: &quot;最少有6个字符&quot;,//最少几个字符（中文占一个字符） maxlength: &quot;最多为12个字符&quot; &#125;, repassword: &#123; equalTo: &quot;两次密码输入不一样&quot; &#125; &#125; &#125;);&#125;);*/","tags":[]},{"title":"","date":"2017-01-10T07:00:05.389Z","path":"2017/01/10/setinterval/","text":"Title #box{ height: 200px; width: 10px; background-color: #f0ad4e; position: relative; } #box1{ position: absolute; right: -50px; margin-top: 75px; width: 50px; height: 50px; background-color: red; } /** * setInterval(fun/code,300）: * setTimeout(fun/code,300): * 区别： * setInterval（）：重复执行。相同时间间隔无限循环； * setTimeout()只执行一次。 */ var b = document.getElementById(\"box1\"); b.onmouseover = function () { var k = b.offsetWidth; var v; clearInterval (); if(k==300){v=-10} if(k==10){v=10} setInterval(function () {if(k","tags":[]},{"title":"JSON","date":"2017-01-09T08:59:19.046Z","path":"2017/01/09/json/","text":"123456789101112131415161718192021&lt;script&gt; var obj=&#123; name:&quot;doge&quot;, age:15, sex:man, imge:“src” &#125;； /** * 1. &#123;&#125; * 2. 键值对 * 3. 每一个值之间使用“，” * 4. 键和值之间使用：分隔 */1.复合类型的值只能是数组或对象，不能是函数、正则表达式对象、日期对象。2.简单类型的值只有四种：字符串、数值（必须以十进制表示）、布尔值和null（NaN\\infinity\\undefine）:3. 字符串必须使用双引号表示，不能使用单引号5. 数组或对象最后一个成员的后面，不能加逗号。4.对象必须放在双引号里&lt;/script&gt; 123456789101112var a =&#123;\"name\":\"周杰伦\",\"age\":36,\"sex\":\"男\",\"love\":\"girl\",\"like\":\"ag\"&#125;; console.log(a); var s =JSON.stringify(a，null，‘’); //将JSON转换为字符串 console.log(s); var x =JSON.parse(s); //将字符串转换为JSON console.log(x); var s =JSON.stringify(a，null，‘’); //将JSON转换为字符串 （第一个参数为需要转化的对象， 第二个为过滤 （需要转换为字符串的键） 第三个为了方便阅读。 ）JSON.parse(str)","tags":[]},{"title":"数据转换","date":"2016-12-31T17:32:24.507Z","path":"2017/01/01/20161227/","text":"你好，欢迎来到！ 数据转换Numberconsole.log(Number(null));//强制转换结果：0 console.log(Number(true));//转换结果：1 console.log(Number([]));//转换结果：0 console.log(Number([“456”]));//转换结果为数字456 console.log(Number(undefined));//转换结果：NaN console.log(+”12345”); //转换结果为数字12345(推荐) String console.log(String(123));//转换结果为字符串123 console.log(String([]));//转换结果为空 console.log(String(null));//转换结果为null console.log(String(undefined));//转换结果为undefined console.log(12345+””);//转换结果为字符串”12345”（推荐） console.log(12345+[“543”,”asd”,”988”]);//转换结果为字符串”12345543,asd,988” console.log(“12345”+null);//转换结果为字符串”12345null” console.log(“12345”+function(){});//转换结果为字符串”12345function(){}” console.log(12345+””); 自动转换/*为假的值有： 0/-0 \"\" NAN undefined null123456 */if(&quot;&quot;)&#123; console.log(&quot;yesyes&quot;);&#125;else&#123; console.log(&quot;nonono&quot;);&#125;","tags":[]},{"title":"git","date":"2016-12-31T17:30:33.995Z","path":"2017/01/01/gitditail/","text":"你好，欢迎来到！ git初步笔记linux命令12345678910111 ls # 列出文件夹下的目录和文件2 ls -a # 列出全部的文件，连同隐藏文件3 ls -l # 列出长数据串，包含文件的属性与权限数据4 cd 文件夹 #进入指定的目录5 cd .. # 返回上一级6 mkdir 文件夹名 # 创建一个文件夹 7 pwd # 返回当前所在路径8 rm t.txt # 删除t.txt文件9 rm 文件夹名 -r # 删除www文件夹（递归删除）10 rmdir 文件夹名 #删除文件夹11 touch filename1 filename2 # 创建多个文件 More info: Writing 使用vi编辑器创建文件11 vi index.html vi编辑器简单操作：按i,进入编辑模式（输入内容） 按esc，退出编辑模式到命令模式 按shift+:，再输入wq保存并退出（编辑模式） git命令12345678910111213141516171819201 # 配置git2 git config --list # 查看git配置3 git config --global --list # 查看git全局配置4 git config --global user.email \"邮箱\"5 git config --global user.user \"用户名\"6 git init # 初始化git仓库（initialization）7 git add 文件夹、文件名 # 把文件夹、文件名添加到本地仓库8 git add . # 添加当前目录下的所有文件到仓库9 git status # 查看文件状态10 git log # 查看提交历史11 git log -p [-num] # 查看近[num次]提交的历史，并对比差异12 git log --stat #显示简要的增改行统计数13 git commit -m \"comment\" # 提交到本地仓库14 git commit --amend # 修改提交的注释内容15 git diff # 查看所有修改的内容16 git diff file_name # 查看file_name文件修改的内容17 # 回到上一个版本18 git reset --hard HEAD^ # 退回到上一个版本19 git reset --hard id # 退回到未来的某个版本20 git reflog # 把项目中的文件提交到本地仓库：添加需要提交的文件(git add [dfg]) 提交文件（git commit -m “comment”） 添加到远程仓库12345671 # 添加远程仓库2 ## 添加后远程仓库的名字叫“origin”，也可以叫其他的，但是一般都会叫origin3 git remote add origin https://github.com/openexw/lear.git4 # 由于远程库是空的，第一次push时加上-u参数，git会把本地master分支推送到远程,5 # 还会把本地的master分支与远程的master分支关联起来，以简化下一次推送6 git push -u origin master 7 git push # 当前分支master推送到远程 修改远程仓库地址12341 git remote show # 查看远程仓库的名称2 git remote show [origin] # 查看远程仓库origin的详细信息3 git remote rm origin # 删除远程仓库地址4 git remote add origin https://github.com/openexw/lear.git # 添加远程仓库 github ssk key配置12341 ssh-keygen -t rsa -C \"your_email@example.com\"2 ## 连续回车3 cd ~/.ssh # 进入生产ssh的目录4 pwd # 查看当前路径 打开ssh生的路径；使用文本编辑器打开id_rsa.pub，并复制文件中的内容；打开https://github.com,并找到settings选项（注意是你的账号的settings）；选择SSH and GPG keys，并选择New SSH key按钮；将刚才复制的内容复制到key中；最后点击Add SSH key按钮。 分支理解分支分支其实就是从某个提交对象往回看的历史。默认为master 指针 何时该使用分支试验性修改：测试新的算法或者为某个特别的模式重构部分代码团队协作增加新功能：为每个新功能的开发创建新的分支，完成该功能开发后，在将其合并到主分支上Bug修改：修复代码中的bug，可以创建新分支来对该bug进行修改，然后将修改合并到主分支上 分支相关的命令1234567891011121314151617181 # 查看分支2 git branch3 # 创建分支4 git branch testing5 # 切换到testing分支6 git checkout testing7 # 创建并切换到该分支8 git checkout -b v.019 # 合并分支10 ## 将testing分支合并到master分支11 git checkout master12 git merge testing13 # 删除分支14 ## 删除本地分支15 git branch -d testing #删除名为testing的分支16 ## 删除远程分支17 git branch -r -d origin/study #study表示远分支名字18 git push origin :study Note:如果合并分支时产生冲突，git也不知道该如何是好，这时就需要你手动修改代码了。因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。 标签发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。标签也是版本库的一个快照。 一个场景： “请把上周一的那个版本打包发布，commit号是6a5819e…” “一串乱七八糟的数字不好找！” 如果换一个办法： “请把上周一的那个版本打包发布，版本号是v1.2” “好的，按照tag v1.2查找commit就行！” 所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。 创建标签1231 git tag v.0.12 # 给指定的com id打上标签3 git tag v.0.9 63c1e36 查看所有的标签11 git tag 操作标签123456789101112131 # 删除标签2 git tag -d v.0.13 # 推送某个标签到远程4 git push origin v.0.15 # 推送全部尚未推送的到远程服务器上的本地标签6 git push origin --tags7 # 获取指定标签的代码8 git checkout tag_name9 # 删除远程标签（已经推送到远程上了）10 ## 1. 删除本地标签11 git tag -d v.0.112 ## 2. 删除远程标签13 git push origin :refs/tags/v.0.1 自定义git忽略特殊文件在git工作区的根目录下创建一个特殊的.gitignore文件,然后把忽略的文件名填进去。配置文件可以不用自己写，github给我们写好了 .gitignore 忽略文件的原则： 忽略操作系统自动生成的文件，比如缩略图等；忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。1231 .idea/2 index.php3 *.ini 总结任务一 新建一个文件夹，并进入文件夹 在文件夹中新建一个git仓库 在仓库中新建一个webroot目录 在webroot目录中新建文件: css/style.css、js/index.js、images/、index.php 将webroot添加到仓库 任务二 新建一个文件夹，并进入文件夹 在文件夹中新建一个git仓库 在仓库中新建一个web目录 在web目录中新建文件: css/style.css、js/index.js、images/、index.php 在images文件夹下存放10张图片（图片内容随便） 将web添加到仓库 将web提交到本地仓库 新建github仓库 将本地的仓库存推送到github 制造多次提交记录 回到上一版本，然后提交到github 回到原来的版本，并提提交到github 修改本地仓库的内容，对比修改的内容（对比单个文件和全部文件） 将修改的内容提交到github 任务三 新建一个文件夹，并进入文件夹 在文件夹中新建一个git仓库 在仓库中新建一个web目录 在web目录中新建文件: css/style.css、js/index.js、images/、index.php 在images文件夹下存放10张图片（图片内容随便） 将web添加到仓库 将web提交到本地仓库 新建github仓库 将本地的仓库存推送到github 制造多次提交记录 回到上一版本，然后推送到github 回到原来的版本，并提推送到github 修改本地仓库的内容，对比修改的内容（对比单个文件和全部文件） 将修改的内容推送到github 新建一个分支dev 切换到dev分支，创建dev目录并进入 创建new_module目录并进入 创建server.php、app/User.php、database/app.sql 提交dev分支到github 将dev分支合并到master分支并推送到github 删除dev分支并推送 任务四(tag)： 新建一个文件夹，并进入文件夹 在文件夹中新建一个git仓库 在仓库中新建一个web目录 在web目录中新建文件: css/style.css、js/index.js、images/、index.php 在images文件夹下存放10张图片（图片内容随便） 将web添加到仓库 将web提交到本地仓库 新建github仓库 将本地的仓库存推送到github10.制造多次提交记录 回到上一版本，然后推送到github 回到原来的版本，并提推送到github 修改本地仓库的内容，对比修改的内容（对比单个文件和全部文件） 将修改的内容推送到github 新建一个分支dev 切换到dev分支，创建dev目录并进入 创建new_module目录并进入 创建server.php、app/User.php、database/app.sql 提交dev分支到github 将dev分支合并到master分支并推送到github 删除dev分支并推送 新建3个标签 将新建的标签推送到github 获取第二个tag中的代码 删除github上的第一个tag CSS布局实例/布局/.form{ width: 500px; height: 300px; border:1px solid red; position: absolute; top: 50%; left: 50%; /第一种水平垂直居中 margin-top:-150px; margin-left:-250px;/ /第一种水平垂直居中/ transform:translate(-50%,-50%);} Javascript笔记1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;body&gt; &lt;div id=\"dom\"&gt; &lt;p&gt;&lt;/p&gt; &lt;/div&gt; &lt;script&gt; // 全局变量 var a,_,a2,$; var π = 3.141592653; console.log(π); //打印输出 var 六 = \"3乘以2\"; //中文变量 //重复声明变量是无效的 var op = 1; var op; //没有用 var 声明的变量都是全局变量 af = 10; console.log(af); // 函数 function aa()&#123; // 局部函数 var ad = 12; console.log(ad); &#125; aa(); //函数调用 // 这不是一个函数，所以 as 也是全局变量 if(1)&#123; var as =13; &#125; console.log(as); // 输出方式： //alert(\"对不起\"); //弹框 //在HTML里面的输出 var dom = document.getElementById(\"dom\"); dom.innerHTML = \"&lt;h2&gt;html的内容&lt;/h2&gt;\"; //dom.innerText = \"文本\"; console.log(\"日志\"); //日志 console.info(\"信息\"); //信息 console.warn(\"警告\"); //警告 console.error(\"错误\"); //错误 &lt;/script&gt;&lt;/body&gt; 一.概念 什么是变量？什么是常量？ 12345678910111213141516171. 变量（Variable）：用来储存数据的容器；在javascript中声明变量时必须以字母开头；变量也能以$和_开头（不推荐使用）；变量对大小写敏感（y和Y是不同的变量）；变量有全局变量和局部变量两种形式在函数外声明的变量称为全局变量，反之为局部变量;不用var声明的变量都为全局变量；eg:if(1)&#123;var as = 12; #if不是函数，故为全局变量af = 15; #为全局变量function han()&#123; var ag = 20; #为局部变量&#125;2. 常量（Constant）:不变的值；常量名首字符为字母或下划线，其后可跟数字；常量对大小写敏感； 什么是标识符？ 123标识符必须是以字母、下划线、美元号等符号开头的,其后可跟若干个字母、数字、下划线等；标识符还能为π和中文（不推荐）； 理解JavaScript中的区块。 12JS是按照代码块来进行编译和执行的，代码块间相互独立，但变量和方法共享。JS代码块是从上到下依次执行。 理解JavaScript中语句。 1语句是发给浏览器的命令，告诉浏览器要做的事情。 二.简答题 JavaScript的组成，他们的全称是什么？中文名字是什么？ 1234JavaScript是一种专门为网页交互而设计的脚本语言，由以下三部分组成：1、核心(ECMAScript)；2、文档对象模型(DOM)；3、浏览器对象模型(BOM)。 简述JavaScript的发展简史。 12345678910布兰登·艾奇（Brendan Eich，1961年～），JavaScript之父；Douglas Crockford ，JavaScript一代宗师；John Resig ，JQuery创始人。JavaScript是由Netscape公司与Sun公司合作开发的，诞生于1995年，它的出现使网页内容不再局限于枯燥的文本，使网页实现了可交互性。当时走在技术革新最前沿的Netscape（网景）公司，决定着手开发一种客户端语言，用来处理这种装简单的验证。当时就职于Netscape公司的布兰登·艾奇开始着手计划将1995年2月发布的LiveScript同时在浏览器和服务器中使用。为了赶在发布日期前完成LiveScript的开发，Netscape与Sun公司成立了一个开发联盟。而此时，Netscape为了搭上媒体热炒Java的顺风车，临时把LiveScript改名为JavaScript。 简述JavaScript的能干的事。 1234567JavaScript能做的事情主要有两方面：1.Web页面在Web页面上，目前主要有三种元素：HTML, CSS, JavaScript。JavaScript做动态的东西。比如在网页完全加载完成后，自动发送一些数据或者从服务器端获取一些数据并展示在页面上。2.Web服务器端实现更高效的通信技术。 标识符的命名规则。 1234（1）标识符由字母、数字和下划线组成；（2）标识符的第一位必须是字母或者下划线，不能是数字；（3）JavaScript中的标识符区分大小写；（4）在JavaScript中预定义的运算符如：+、-、*、/、%不可以用于定义标识符。 JavaScript中的保留关键字。 12345678JavaScript 中，一些标识符是保留关键字，不能用作变量名或函数名。abstract arguments boolean break byte case catch char const continue debugger default delete do double else eval false final finally float for function goto if implements in instanceof int interface let long native new null package private protected public return short static switch synchronized this throw throws transient truetry typeof var void volatile while with yield 简述JavaScript中的注释种类，并举例说明。 1234567891011JavaScript可以添加注释来进行解释内容，提高代码的可读性，不会执行注释。单行注释以 // 开头。eg://单行注释多行注释以 /* 开始，以 */ 结尾。/*第一行代码第二行代码第三行代码*/多行注释还可用&lt;!-- --&gt;; 简述JavaScript中的输出方式。 12345678910111213141516JavaScript 可以通过不同的方式来输出数据： (1)使用 window.alert() 弹出警告框。 eg: alert(\"弹框\"); (2)使用 document.write() 方法将内容写到 HTML 文档中。 eg: document.write()(\"文本\"); (3)使用 innerHTML 写入到 HTML 元素。 eg: document.innerHTML(\"文本\"); (4)使用 console.log() 写入到浏览器的控制台。 eg: console.log(\"打印\"); console.info ( \"信息\" ); console.error（ \"错误\" ）; console.warn ( \"警告\" );","tags":[]},{"title":"my js study ","date":"2016-12-23T09:29:47.000Z","path":"2016/12/23/my-js-study/","text":"JavaScript的组成，他们的全称是什么？中文名字是什么？ 简述JavaScript的发展简史。 简述JavaScript的能干的事。 标识符的命名规则。 JavaScript中的保留关键字。 简述JavaScript中的注释种类，并举例说明。 简述JavaScript中的输出方式。","tags":[]},{"title":"变量 ","date":"2016-12-23T09:29:47.000Z","path":"2016/12/23/js/","text":"1 什么是变量？什么是常量？12345与代数一样，JavaScript 变量可用于存放值（比如 x=5）和表达式（比如 z=x+y）。变量可以使用短名称（比如 x 和 y），也可以使用描述性更好的名称（比如 age, sum, totalvolume）。常量：老师说是只能赋值一次的量。 2 什么是标识符？1234567标识符必须是以字母、下划线、美元号等符号开头的,其后可以是零个或若干个字母、数字、下划线、美元好等符号组成的字符串。在JavaScript中预定义的运算符如：+、-、*、/、%不可以用于定义标识符。每个标识符可以有若干个单词左右连接而成，常量标识符应该全部使用大写字母来表示区别一般标识符应该全部使用小写字母以示区别，特殊常量标识符应该以大写字母开头以示区别，函数的标识符应该以小写字母开头以示区别，不要使用JavaScript中预定义保留的关键字。JavaScript严格区分大小写字母。 3 理解JavaScript中的区块1不知道该怎么说。不好言传！youknowde！ 4理解JavaScript中语句123456JavaScript 语句 :JavaScript 语句向浏览器发出的命令。语句的作用是告诉浏览器该做什么。JavaScript 语句:JavaScript 语句是发给浏览器的命令。这些命令的作用是告诉浏览器要做的事情。下面的 JavaScript 语句向 id=&quot;demo&quot; 的 HTML 元素输出文本 &quot;你好 Dolly&quot; ： 1document.getElementById(&quot;demo&quot;).innerHTML = &quot;你好 Dolly&quot;; 二、 简答题 JavaScript的组成，他们的全称是什么？中文名字是什么？12345678JS全称为javascript,是一种由Netscape的LiveScript发展而来的脚本语言,主要目的是为了解决服务器终端语言遗留的速度问题。ECMAscript 一套标准。最新的标准ES6基本语法构成，比如操作符、控制结构语句标准库、Array 、Date、math等BOM, Browser Objeck Model浏览器对象模型Dom；document object model文档对象模型 2 简述JavaScript的发展简史。1算了嘛 3 简述JavaScript的能干的事。123用JavaScript能实现很炫的功能，但其实这些功能都是浏览器自己带的功能，如果浏览器不允许，没有API就很难用JavaScript实现。而浏览器是用C++等其他语言编写成的。 4 标识符的命名规则123456变量首字不能为数字 和运算符，运算符不能出现在变量名中，一下不能用于标识符命名：JavaScript 保留关键字，JavaScript 对象、属性和方法Windows 保留关键字HTML 事件句柄非标准 JavaScript 5 JavaScript中的保留关键字1234567JavaScript 经常与 Java 一起使用。您应该避免使用一些 Java 对象和属性作为 JavaScript 标识符：getClassjavaJavaArrayjavaClassJavaObjectJavaPackage 6 简述JavaScript中的注释种类，并举例说明。123456JavaScript 不会执行注释。我们可以添加注释来对 JavaScript 进行解释，或者提高代码的可读性。单行注释以 // 开头。本例用单行注释来解释代码：// 输出标题：document.getElementById(&quot;myH1&quot;).innerHTML=&quot;欢迎来到我的主页&quot;; 7 简[M (2述JavaScript中的输出方式123456JavaScript 没有任何打印或者输出的函数。JavaScript 显示数据 可以通过不同的方式来输出数据：使用 window.alert() 弹出警告框。使用 document.write() 方法将内容写到 HTML 文档中。使用 innerHTML 写入到 HTML 元素。使用 console.log() 写入到浏览器的控制台。","tags":[]},{"title":"函数递归 ","date":"2016-12-23T09:29:47.000Z","path":"2016/12/23/函数递归/","text":"斐波拉契（）函数递归（函数自己调用自己。知道找到出口）1234function fib(n) &#123; if(n==1||n==2)&#123;return 1;&#125; return fib(n-1)+fib(n-2); &#125; 假设函数已经存在 确定递归体 确定跳出条件 书写递归函数求 1,3,5,7,9,…第n项的结果和前n项和,序号从0开始1234567891. 假设有一个函数 add（n）add(0)=1.add(1) 3=add(0)+(2*n-1)add(2) 5=add(1)+(2*n-1)var t=1; function kk (n) &#123; if(n==1)&#123;return t;&#125; return kk(n-1)+(2*n-1); &#125; 求10!12345 function js(n) &#123; if(n==1)&#123;return 1;&#125; return js(n-1)*n; &#125;console .log(js(10));","tags":[]}]